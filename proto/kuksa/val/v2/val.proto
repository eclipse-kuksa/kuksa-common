/********************************************************************************
 * Copyright (c) 2022 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License 2.0 which is available at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * SPDX-License-Identifier: Apache-2.0
 ********************************************************************************/

syntax = "proto3";

package kuksa.val.v2;

option go_package = "kuksa/val/v2";

import "types.proto";

// Note on authorization:
// Tokens (auth-token or auth-uuid) are sent as (GRPC / http2) metadata.
//
// The auth-token is a JWT compliant token as the examples found here:
// https://github.com/eclipse-kuksa/kuksa-databroker/tree/main/certificates/jwt
//
// See also https://github.com/eclipse-kuksa/kuksa-databroker/blob/main/doc/authorization.md#jwt-access-token
//
// Upon reception of auth-token, server shall generate an auth-uuid in metadata
// that the client can use instead of auth-token in subsequent calls.

service VAL {
  // get current value of a single attribute, sensor or actuator
  rpc Get(GetRequest) returns (GetResponse);
  
  // get current values of a set of attributes, sensors or actuators
  rpc GetBatch(GetRequestBatch) returns (GetResponseBatch);

  // subscribe to sensor and actuator values
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);

  // actuate on a single actuator value
  rpc Actuate(ActuateRequest) returns (ActuateResponse);

  // actuate on more than one actuators values
  rpc ActuateBatch(ActuateRequestBatch) returns (ActuateResponseBatch);
  
  // provide current value of attributes, sensors and actuator - for low update frequency
  rpc ProvideOnce(ProvideOnceRequest) returns (ProvideOnceResponse);

  // provide stream of current values of attributes, sensors and actuator - for high frequency
  // return stream of ACK
  rpc ProvideStream(stream ProvideUpwardsStream) returns (stream ProvideDownwardsStream);

  //get static metadata
  rpc GetMetadata(MetadataRequest) returns (MetadataResponse);

  rpc GetServerInfo(GetServerInfoRequest) returns (GetServerInfoResponse);
}

message GetRequest {
  EntryRequest entry = 1;
}

message GetResponse {
  DataEntry entry = 1;
}

message GetRequestBatch {
  map<string, EntryRequest> entries = 1;
}

message GetResponseBatch {
  map<string, DataEntry> entries = 1;
}

message SubscribeRequest {
  repeated EntryRequest entries = 1;
}

message SubscribeResponse {
  repeated DataEntry entries = 1;
}

message ActuateRequest {
  DatapointUpdate actuator = 1;
}

message ActuateResponse {
  ActuationResult result = 1;
}

message ActuateRequestBatch {
  map<string, Value>  actuators = 1;
}

message ActuateResponseBatch {
  map<string, ActuationResult> responses = 1;
}

message ProvideOnceRequest {
  UpdateDatapoints update_datapoints = 1;
}

message ProvideOnceResponse {
  oneof action {
    ValueFailure failure = 1;
  }
}

message ProvideUpwardsStream {
  oneof action {
    UpdateDatapoints update_datapoints = 1;
    ActuateCommandResponse actuate_command_response = 2;
  }
}

message ProvideDownwardsStream {
  oneof action {
    UpdateValueFailures update_failure = 2;
    ActuateCommandRequest actuate_command_request = 1;
  }
}

message MetadataRequest {
  repeated string path = 1;
  repeated Field fields = 2;
}

message MetadataResponse {
  repeated Metadata metadata = 1;
}

message GetServerInfoRequest {
  // Nothing yet
}

message GetServerInfoResponse {
  string name    = 1;
  string version = 2;
}
