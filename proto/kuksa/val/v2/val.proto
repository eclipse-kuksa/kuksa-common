/********************************************************************************
 * Copyright (c) 2022 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License 2.0 which is available at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * SPDX-License-Identifier: Apache-2.0
 ********************************************************************************/

syntax = "proto3";

package kuksa.val.v2;

option go_package = "kuksa/val/v2";

import "types.proto";

service VAL {
  // Get the latest value of a signal
  //
  // Returns (GRPC error code):
  //   NOT_FOUND if the requested datapoints doesn't exist
  //   PERMISSION_DENIED if access is denied
  rpc GetValue(GetValueRequest) returns (GetValueResponse);
  
  // Get the lastest value of a set of signals
  //
  // Returns (GRPC error code):
  //   NOT_FOUND if any of the requested signals doesn't exist.
  //   PERMISSION_DENIED if access is denied for any of the requested signals.
  //
  // grpc NOT_FOUND: Vehicle.Speed2 couldn't be found.
  // grpc.Status.details = message BatchGetValueError {
  //    map<String, Error>
  // }
  rpc GetValues(GetValuesRequest) returns (GetValuesResponse);

  // List values of signals matching the request.
  //
  // Returns a list of signal values. Only value that the user is allowed to
  // read are included (everything else is ignored).
  //
  // Returns (grpc error code):
  //   not_found if the specified root branch does not exist.
  rpc ListValues(ListValuesRequest) returns (ListValuesResponse);

  // Subscribe to a set of signals
  // Returns (GRPC error code):
  //   NOT_FOUND if any of the signals are non-existant.
  //   PERMISSION_DENIED if access is denied for any of the signals.
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse);

  // Actuate a single actuator
  //
  // Returns (GRPC error code):
  //   NOT_FOUND if the actuator does not exist.
  //   PERMISSION_DENIED if access is denied for of the actuator.
  //   UNAVAILABLE if there is no provider currently providing the actuator
  rpc Actuate(ActuateRequest) returns (ActuateResponse);

  // Actuate multiple actuators
  //
  // Returns (GRPC error code):
  //   NOT_FOUND if any of the actuators are non-existant.
  //   PERMISSION_DENIED if access is denied for any of the actuators.
  //   UNAVAILABLE if there is no provider currently providing an actuator
  rpc Actuate(ActuateRequest) returns (ActuateResponse);
  rpc BatchActuate(BatchActuateRequest) returns (BatchActuateResponse);

  // List metadata of signals matching the request.
  //   NOT_FOUND if the specified root branch does not exist.
  rpc ListMetadata(ListMetadataRequest) returns (ListMetadataResponse);

  // Publish a signal value. Used for low frequency signals (e.g. attributes).
  //
  // Returns (GRPC error code):
  //   NOT_FOUND if any of the signals are non-existant.
  //   PERMISSION_DENIED if access is denied for any of the signals.
  rpc PublishValue(PublishValueRequest) returns (PublishValueResponse);

  // Open a stream used to provide actuation and/or publishing values using
  // a streaming interface. Used to provide actuators and to enable high frequency
  // updates of values.
  //
  // The open stream is used for request / response type communication between the
  // provider and server (where the initiator of a request can vary).
  // Errors are communicated as messages in the stream.
  rpc OpenProviderStream(stream OpenProviderStreamRequest) returns (stream OpenProviderStreamResponse);

  // Get server information
  rpc GetServerInfo(GetServerInfoRequest) returns (GetServerInfoResponse);
}

message GetValueRequest {
  string path = 1;
}

message GetValueResponse {
  Datapoint data_point = 1;
}

message GetValuesRequest {
  repeated string paths = 1;
}

message GetValuesResponse {
  repeated Datapoint datapoints = 1;
}

message SubscribeRequest {
  repeated string paths = 1;
}

message SubscribeResponse {
  map<string, Datapoint> entries = 1;
}

message ActuateRequest {
  string path = 1;
  Value value = 2;
}

message ActuateResponse {
}

message BatchActuateRequest {
  repeated ActuateRequest actuate_requests = 1;
}

message BatchActuateResponse {
}

message PublishValueRequest {
  // Unique request id that can be used to identify the response.
  int32 request_id = 1;

  // Signal identified by either id or path
  oneof signal {
    int32 id = 10;
    string path = 11;
  }

  // The value to publish
  oneof data {
    Value value = 20;
    Failure failure = 21;
  }
}

message PublishValueResponse {
  int32 request_id = 1;
  // TODO: Add error cases
}

message OpenProviderStreamRequest {
  oneof action {
    // Inform server of a sensor this provider provides.
    ProvideSensorRequest provide_sensor_request = 1;
    // Inform server of an actuator this provider provides.
    ProvideActuatorRequest provide_actuator_request = 2;
    // Publish a value.
    PublishValueRequest publish_value_request = 3;
    // Sent to acknowledge the acceptance of a actuate request.
    ActuateResponse actuate_response = 4;
    // Sent to acknowledge the acceptance of a batch actuate
    // request.
    BatchActuateResponse batch_actuate_response = 5;
  }
}

message OpenProviderStreamResponse {
  oneof action {
    // Response to a provide sensor request.
    ProvideSensorResponse provide_sensor_response = 1;
    // Response to a provide actuator request.
    ProvideActuatorResponse provide_actuator_response = 2;
    // Acknowledgement that a published value was received.
    PublishValueResponse publish_value_response = 3;
    // Send an actuate request to a provider.
    ActuateRequest actuate_request = 4;
    // Send a batch actuate request to a provider.
    BatchActuateRequest batch_actuate_request = 5;
  }
}

message ListMetadataRequest {
  // Path of a branch or signal (i.e. the "root" path)
  string root = 1;
  // Optional filter
  string filter = 2;
}

message MetadataResponse {
  repeated Metadata metadata = 1;
}

message GetServerInfoRequest {
  // Nothing yet
}

message GetServerInfoResponse {
  string name    = 1;
  string version = 2;
}
